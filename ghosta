local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Configurações globais
local Config = {
    Settings = {
        uiColor = Color3.fromRGB(30, 30, 30),
        uiAccentColor = Color3.fromRGB(0, 170, 255),
        reachLeg = 50,
        reachArm = 50,
        fakeLegActive = false,
        fakeArmActive = false,
        aimbotActive = false,
        autoGKActive = false,
        skillRecordKey = Enum.KeyCode.F,
        autoSkillsActive = false,
        selectedConfig = nil
    }
}

-- Persistência de dados
local SkillData = {
    recording = false,
    movements = {},
    lastPosition = nil,
    lastCFrame = nil,
    startTime = nil
}

local ConfigData = {
    savedConfigs = {}
}

local function saveData(file, data)
    if writefile then
        local success, err = pcall(function()
            writefile(file, HttpService:JSONEncode(data))
        end)
        if not success then warn("[Loader] Falha ao salvar dados: " .. tostring(err)) end
    end
end

local function loadData(file)
    if isfile and readfile then
        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(file))
        end)
        if success then return data end
    end
    return nil
end

-- Detectar tipo de personagem (R6 ou R15)
local function isR6(character)
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.RigType == Enum.HumanoidRigType.R6 then
            return true
        end
    end
    return false
end

-- Detectar bola no jogo
local function detectBall()
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("BasePart") and (obj.Name:lower():match("ball") or obj.Name:lower():match("soccer")) then
            return obj
        end
    end
    return nil
end

-- Detectar gol adversário
local function detectGoal()
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("BasePart") and obj.Name:lower():match("goal") then
            return obj
        end
    end
    return Workspace:FindFirstChildWhichIsA("BasePart") -- Fallback
end

-- Interface do usuário profissional
local function createUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "FootballUI"
    ScreenGui.Parent = CoreGui
    ScreenGui.IgnoreGuiInset = true
    ScreenGui.ResetOnSpawn = false

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 500, 0, 600)
    MainFrame.Position = UDim2.new(0.5, -250, 0.5, -300)
    MainFrame.BackgroundColor3 = Config.Settings.uiColor
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    MainFrame.ClipsDescendants = true

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = MainFrame

    local Tabs = Instance.new("Frame")
    Tabs.Size = UDim2.new(1, 0, 0, 40)
    Tabs.BackgroundColor3 = Config.Settings.uiAccentColor
    Tabs.Parent = MainFrame

    local TabContents = Instance.new("Frame")
    TabContents.Size = UDim2.new(1, 0, 1, -40)
    TabContents.Position = UDim2.new(0, 0, 0, 40)
    TabContents.BackgroundTransparency = 1
    TabContents.Parent = MainFrame

    local function createTab(name, position, callback)
        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(0.2, 0, 1, 0)
        TabButton.Position = UDim2.new(position, 0, 0, 0)
        TabButton.Text = name
        TabButton.BackgroundColor3 = Config.Settings.uiAccentColor
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.Font = Enum.Font.SourceSansBold
        TabButton.TextSize = 16
        TabButton.Parent = Tabs
        TabButton.MouseButton1Click:Connect(callback)
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 5)
        UICorner.Parent = TabButton
    end

    local function clearTabContent()
        for _, child in pairs(TabContents:GetChildren()) do
            child:Destroy()
        end
    end

    local function createMainTab()
        clearTabContent()
        local Content = Instance.new("Frame")
        Content.Size = UDim2.new(1, 0, 1, 0)
        Content.BackgroundTransparency = 1
        Content.Parent = TabContents

        local function createSlider(name, setting, min, max, yPos)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Size = UDim2.new(0.9, 0, 0, 50)
            SliderFrame.Position = UDim2.new(0.05, 0, yPos, 0)
            SliderFrame.BackgroundTransparency = 1
            SliderFrame.Parent = Content

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(0.4, 0, 0, 30)
            Label.Text = name .. ": " .. Config.Settings[setting]
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.BackgroundTransparency = 1
            Label.Font = Enum.Font.SourceSans
            Label.TextSize = 14
            Label.Parent = SliderFrame

            local Slider = Instance.new("TextBox")
            Slider.Size = UDim2.new(0.5, 0, 0, 30)
            Slider.Position = UDim2.new(0.4, 0, 0, 0)
            Slider.Text = tostring(Config.Settings[setting])
            Slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            Slider.TextColor3 = Color3.fromRGB(255, 255, 255)
            Slider.Parent = SliderFrame
            Slider.TextChanged:Connect(function()
                local value = tonumber(Slider.Text)
                if value then
                    Config.Settings[setting] = math.clamp(value, min, max)
                    Label.Text = name .. ": " .. Config.Settings[setting]
                    saveData("football_settings.dat", Config.Settings)
                end
            end)
        end

        local function createToggle(name, setting, yPos)
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Size = UDim2.new(0.9, 0, 0, 50)
            ToggleButton.Position = UDim2.new(0.05, 0, yPos, 0)
            ToggleButton.Text = name .. ": " .. (Config.Settings[setting] and "ON" or "OFF")
            ToggleButton.BackgroundColor3 = Config.Settings.uiAccentColor
            ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleButton.Font = Enum.Font.SourceSans
            ToggleButton.TextSize = 14
            ToggleButton.Parent = Content
            ToggleButton.MouseButton1Click:Connect(function()
                Config.Settings[setting] = not Config.Settings[setting]
                ToggleButton.Text = name .. ": " .. (Config.Settings[setting] and "ON" or "OFF")
                saveData("football_settings.dat", Config.Settings)
            end)
            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 5)
            UICorner.Parent = ToggleButton
        end

        createSlider("Reach Leg", "reachLeg", 0, 100, 0.1)
        createSlider("Reach Arm", "reachArm", 0, 100, 0.2)
        createToggle("Fake Leg", "fakeLegActive", 0.3)
        createToggle("Fake Arm", "fakeArmActive", 0.4)
        createToggle("Aimbot", "aimbotActive", 0.5)
        createToggle("Auto-GK", "autoGKActive", 0.6)
    end

    local function createAutoSkillsTab()
        clearTabContent()
        local Content = Instance.new("Frame")
        Content.Size = UDim2.new(1, 0, 1, 0)
        Content.BackgroundTransparency = 1
        Content.Parent = TabContents

        local RecordButton = Instance.new("TextButton")
        RecordButton.Size = UDim2.new(0.45, 0, 0, 50)
        RecordButton.Position = UDim2.new(0.05, 0, 0.1, 0)
        RecordButton.Text = "Start Record Skills"
        RecordButton.BackgroundColor3 = Config.Settings.uiAccentColor
        RecordButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        RecordButton.Font = Enum.Font.SourceSans
        RecordButton.TextSize = 14
        RecordButton.Parent = Content
        RecordButton.MouseButton1Click:Connect(function()
            SkillData.recording = true
            SkillData.movements = {}
            SkillData.startTime = tick()
            print("[AutoSkills] Iniciando gravação de movimentos.")
        end)
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 5)
        UICorner.Parent = RecordButton

        local StopButton = Instance.new("TextButton")
        StopButton.Size = UDim2.new(0.45, 0, 0, 50)
        StopButton.Position = UDim2.new(0.5, 0, 0.1, 0)
        StopButton.Text = "Stop Record Skills"
        StopButton.BackgroundColor3 = Config.Settings.uiAccentColor
        StopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        StopButton.Font = Enum.Font.SourceSans
        StopButton.TextSize = 14
        StopButton.Parent = Content
        StopButton.MouseButton1Click:Connect(function()
            SkillData.recording = false
            print("[AutoSkills] Gravação parada. " .. #SkillData.movements .. " movimentos salvos.")
            saveData("football_skills.dat", SkillData)
        end)
        local UICorner2 = Instance.new("UICorner")
        UICorner2.CornerRadius = UDim.new(0, 5)
        UICorner2.Parent = StopButton

        local KeyLabel = Instance.new("TextLabel")
        KeyLabel.Size = UDim2.new(0.9, 0, 0, 30)
        KeyLabel.Position = UDim2.new(0.05, 0, 0.2, 0)
        KeyLabel.Text = "Skill Activation Key: " .. tostring(Config.Settings.skillRecordKey)
        KeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        KeyLabel.BackgroundTransparency = 1
        KeyLabel.Font = Enum.Font.SourceSans
        KeyLabel.TextSize = 14
        KeyLabel.Parent = Content

        local KeyButton = Instance.new("TextButton")
        KeyButton.Size = UDim2.new(0.9, 0, 0, 50)
        KeyButton.Position = UDim2.new(0.05, 0, 0.3, 0)
        KeyButton.Text = "Change Skill Key"
        KeyButton.BackgroundColor3 = Config.Settings.uiAccentColor
        KeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        KeyButton.Font = Enum.Font.SourceSans
        KeyButton.TextSize = 14
        KeyButton.Parent = Content
        KeyButton.MouseButton1Click:Connect(function()
            KeyButton.Text = "Press a key..."
            local connection
            connection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    Config.Settings.skillRecordKey = input.KeyCode
                    KeyLabel.Text = "Skill Activation Key: " .. tostring(Config.Settings.skillRecordKey)
                    KeyButton.Text = "Change Skill Key"
                    connection:Disconnect()
                    saveData("football_settings.dat", Config.Settings)
                end
            end)
        end)
        local UICorner3 = Instance.new("UICorner")
        UICorner3.CornerRadius = UDim.new(0, 5)
        UICorner3.Parent = KeyButton
    end

    createTab("Main", 0, createMainTab)
    createTab("Auto Skills", 0.2, createAutoSkillsTab)
end

-- Funções de Reach
local function applyReach(character, partName, reachValue)
    if not character then return end
    local part = character:FindFirstChild(partName)
    if part and part:IsA("BasePart") then
        part.Size = Vector3.new(part.Size.X, part.Size.Y, part.Size.Z + reachValue / 10)
    end
end

-- Funções de Fake Limbs
local function createFakeLimb(character, partName)
    if not character then return nil end
    local part = character:FindFirstChild(partName)
    if part and part:IsA("BasePart") then
        local fakePart = Instance.new("Part")
        fakePart.Size = part.Size
        fakePart.Position = part.Position
        fakePart.Anchored = true
        fakePart.Transparency = 1
        fakePart.CanCollide = true
        fakePart.Parent = Workspace
        return fakePart
    end
    return nil
end

-- Aimbot para chutar no gol
local function aimbot()
    RunService.Heartbeat:Connect(function()
        if not Config.Settings.aimbotActive then return end
        local ball = detectBall()
        local goal = detectGoal()
        local character, humanoid = getCharacter()
        if not ball or not goal or not character or not humanoid then return end
        local rootPart = character.HumanoidRootPart
        local direction = (goal.Position - ball.Position).Unit
        local kickForce = 100
        ball.Velocity = direction * kickForce
        rootPart.CFrame = CFrame.new(rootPart.Position, ball.Position)
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        task.wait(0.01)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end)
end

-- Auto-GK com cálculo de trajetória
local function autoGK()
    RunService.Heartbeat:Connect(function()
        if not Config.Settings.autoGKActive then return end
        local ball = detectBall()
        local character, humanoid = getCharacter()
        if not ball or not character or not humanoid then return end
        local rootPart = character.HumanoidRootPart
        local ballVelocity = ball.Velocity
        local predictedPos = ball.Position + ballVelocity * 0.1
        local direction = (predictedPos - rootPart.Position).Unit
        humanoid:Move(direction)
        if (predictedPos - rootPart.Position).Magnitude < 5 then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            task.wait(0.01)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        end
    end)
end

-- Sistema de Auto Skills
local function getCharacter()
    local plr = LocalPlayer
    if plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then
        return plr.Character, plr.Character.Humanoid
    end
    return nil, nil
end

local function recordMovements()
    RunService.Heartbeat:Connect(function()
        if not SkillData.recording then return end
        local char, humanoid = getCharacter()
        if not char or not humanoid then return end
        local rootPart = char.HumanoidRootPart
        local currentTime = tick() - SkillData.startTime
        local currentPos = rootPart.Position
        local currentCFrame = rootPart.CFrame
        local inputs = {
            moveDirection = humanoid.MoveDirection,
            jump = humanoid.Jump,
            mousePos = UserInputService:GetMouseLocation(),
            keysPressed = {}
        }
        for _, input in pairs(UserInputService:GetKeysPressed()) do
            if input.UserInputType == Enum.UserInputType.Keyboard then
                table.insert(inputs.keysPressed, input.KeyCode)
            end
        end
        if SkillData.lastPosition then
            local deltaPos = (currentPos - SkillData.lastPosition).Magnitude
            if deltaPos > 0.1 or inputs.jump or #inputs.keysPressed > 0 then
                table.insert(SkillData.movements, {
                    time = currentTime,
                    position = currentPos,
                    cFrame = currentCFrame,
                    inputs = inputs
                })
            end
        end
        SkillData.lastPosition = currentPos
        SkillData.lastCFrame = currentCFrame
    end)
end

local function replayMovements()
    if not Config.Settings.autoSkillsActive then return end
    task.spawn(function()
        local startTime = tick()
        local char, humanoid = getCharacter()
        if not char or not humanoid then return end
        local rootPart = char.HumanoidRootPart
        for _, movement in ipairs(SkillData.movements) do
            while Config.Settings.autoSkillsActive and (tick() - startTime) < movement.time do
                task.wait()
            end
            if not Config.Settings.autoSkillsActive then break end
            char, humanoid = getCharacter()
            if not char or not humanoid then break end
            local tween = TweenService:Create(rootPart, TweenInfo.new(0.05, Enum.EasingStyle.Linear), {
                CFrame = movement.cFrame
            })
            tween:Play()
            humanoid:Move(movement.inputs.moveDirection)
            humanoid.Jump = movement.inputs.jump
            for _, key in pairs(movement.inputs.keysPressed) do
                VirtualInputManager:SendKeyEvent(true, key, false, game)
                task.wait(0.01)
                VirtualInputManager:SendKeyEvent(false, key, false, game)
            end
            local mouseDelta = movement.inputs.mousePos - UserInputService:GetMouseLocation()
            if mouseDelta.Magnitude > 5 then
                VirtualInputManager:SendMouseMoveEvent(movement.inputs.mousePos.X, movement.inputs.mousePos.Y, game)
            end
        end
        Config.Settings.autoSkillsActive = false
        print("[AutoSkills] Reprodução concluída.")
    end)
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Config.Settings.skillRecordKey then
        Config.Settings.autoSkillsActive = not Config.Settings.autoSkillsActive
        if Config.Settings.autoSkillsActive then
            print("[AutoSkills] Reproduzindo movimentos salvos.")
            replayMovements()
        else
            print("[AutoSkills] Reprodução parada.")
        end
    end
end)

-- Bypass de anticheat universal
local function advancedAnticheatBypass()
    local success, err = pcall(function()
        setthreadidentity(2)
        local mt = getrawmetatable(game)
        setreadonly(mt, false)

        local oldNamecall
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            local method = getnamecallmethod()
            local blockedMethods = {"Kick", "Ban", "Detect", "ReportAbuse"}
            if table.find(blockedMethods, method) or method:lower():find("detect") then
                print("[Bypass] Tentativa bloqueada: " .. method)
                return nil
            end
            if method == "FireServer" and self.Name:lower():match("detect|exploit|cheat|anti") then
                print("[Bypass] Remote bloqueado: " .. self.Name)
                return nil
            end
            return oldNamecall(self, ...)
        end)

        local oldIndex
        oldIndex = hookmetamethod(game, "__index", function(self, key)
            if key:lower():match("detect|kill|ban|cheat") then
                return function(...) return true end
            end
            return oldIndex(self, key)
        end)

        local oldNewIndex = mt.__newindex
        mt.__newindex = function(t, k, v)
            if tostring(k):lower():match("velocity|position|cframe") then
                print("[Bypass] Escrita bloqueada: " .. tostring(k))
                return
            end
            return oldNewIndex(t, k, v)
        end
        setreadonly(mt, true)

        for _, conn in pairs(getconnections(game:GetService("LogService").MessageOut)) do
            conn:Disable()
        end
        for _, conn in pairs(getconnections(LocalPlayer.Chatted)) do
            conn:Disable()
        end

        for _, v in pairs(getgc(true)) do
            if type(v) == "table" and rawget(v, "Detected") then
                local oldDetect = rawget(v, "Detected")
                hookfunction(oldDetect, function(action, ...)
                    if action ~= "_" then return true end
                    return oldDetect(action, ...)
                end)
            end
        end

        for _, v in pairs(getgc(true)) do
            if type(v) == "function" and debug.getinfo(v).name and debug.getinfo(v).name:match("IntegrityCheck|AntiCheat") then
                hookfunction(v, function(...) return true end)
            end
        end
    end)
    if not success then
        warn("[Bypass] Erro ao aplicar bypass: " .. tostring(err))
    end
end

local function detectAnticheat()
    local detected = false
    local checks = {
        function() return getrawmetatable(game) ~= nil end,
        function() return #getconnections(game:GetService("LogService").MessageOut) > 0 end,
        function() return #getconnections(LocalPlayer.Chatted) > 0 end
    }
    for _, check in ipairs(checks) do
        local success, result = pcall(check)
        if success and result then detected = true break end
    end
    return detected
end

local function ghostMode()
    warn("[Ghosta] Anticheat detectado! Ativando camuflagem avançada.")
    local char, humanoid = getCharacter()
    if humanoid then
        humanoid.WalkSpeed = 16
        humanoid.JumpPower = 50
        humanoid.HipHeight = 2
    end
    RunService.Heartbeat:Connect(function()
        if char and humanoid then
            local randomMove = Vector3.new(math.random(-0.5, 0.5), 0, math.random(-0.5, 0.5))
            humanoid:Move(randomMove)
        end
    end)
    local sg = CoreGui:FindFirstChild("FootballUI")
    if sg then sg.Enabled = false end
    for k, v in pairs(Config.Settings) do
        if k:match("Active$") then Config.Settings[k] = false end
    end
    saveData("football_settings.dat", Config.Settings)
end

-- Aplicar funcionalidades em tempo real
local function applyFeatures()
    local fakeLeg, fakeArm
    RunService.Heartbeat:Connect(function()
        local character, humanoid = getCharacter()
        if not character or not humanoid then return end
        local isR6Char = isR6(character)
        local legPart = isR6Char and "Right Leg" or "RightLowerLeg"
        local armPart = isR6Char and "Right Arm" or "RightLowerArm"

        if Config.Settings.reachLeg > 0 then
            applyReach(character, legPart, Config.Settings.reachLeg)
        end
        if Config.Settings.reachArm > 0 then
            applyReach(character, armPart, Config.Settings.reachArm)
        end

        if Config.Settings.fakeLegActive and not fakeLeg then
            fakeLeg = createFakeLimb(character, legPart)
        elseif not Config.Settings.fakeLegActive and fakeLeg then
            fakeLeg:Destroy()
            fakeLeg = nil
        end
        if Config.Settings.fakeArmActive and not fakeArm then
            fakeArm = createFakeLimb(character, armPart)
        elseif not Config.Settings.fakeArmActive and fakeArm then
            fakeArm:Destroy()
            fakeArm = nil
        end
    end)
end

-- Inicialização
local function init()
    loadData("football_settings.dat") or Config.Settings
    loadData("football_skills.dat") or SkillData
    if detectAnticheat() then
        ghostMode()
    else
        advancedAnticheatBypass()
        createUI()
        recordMovements()
        aimbot()
        autoGK()
        applyFeatures()
        print("[Loader] Script iniciado com sucesso às " .. os.date("%H:%M:%S %d/%m/%Y"))
    end
end

init()
init()

 Sajie
